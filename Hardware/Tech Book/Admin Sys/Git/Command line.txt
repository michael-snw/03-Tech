# 1. Commandes utilisées
## 1.1. Initialisation et configuration
# Initialise un nouveau dépôt local.
git init

# Définit le nom d'utilisateur global.
git config --global user.name "Ton Nom"

# Définit l'email global.
git config --global user.email "ton.email@example.com"


## 1.2. Ajout des fichiers au suivi et commit
# Ajoute tous les fichiers au suivi.
git add .

# Crée un commit avec le message "Premier commit".
git commit -m "Premier commit"


## 1.3. Création de fichiers sentinelles .gitkeep
# Crée un fichier .gitkeep pour conserver les répertoires vides.
touch .gitkeep


## 1.4. Ajout des fichiers sentinelles au dépôt
# Ajoute les fichiers au suivi, y compris les .gitkeep.
git add .

# Commit des fichiers.
git commit -m "Ajout de fichiers sentinelles pour répertoires vides"


## 1.5. Changement de l'URL du dépôt distant
# Change l'URL du dépôt distant.
git remote set-url origin https://github.com/michael-snw/04-AI.git


## 1.6. Push vers le dépôt distant
# Envoie les modifications vers la branche 'master' sur le dépôt distant.
git push origin master


## 1.7. Clonage d’un dépôt spécifique
# Cloner un dépôt dans un répertoire spécifique.
git clone https://github.com/michael-snw/05-Stream.git F:/BackupGitHub/05-Stream


# 2. Commandes proposées
## 2.1. Configuration de Git
# Utiliser VS Code comme éditeur par défaut pour Git.
git config --global core.editor "code --wait"

# Afficher la configuration actuelle de Git.
git config --list


## 2.2. Synchronisation et gestion des branches
# Renommer la branche actuelle en 'main'.
git branch -M main

# Définir 'main' comme branche par défaut et pousser les modifications.
git push -u origin main

# Réappliquer les commits locaux après avoir récupéré les modifications du dépôt distant.
git pull --rebase origin master


## 2.3. Résolution des conflits et nettoyage
# Annuler un merge en cours en cas de conflits.
git merge --abort

# Revenir au commit précédent en supprimant les modifications locales.
git reset --hard HEAD~1

# Restaurer la version d'un fichier depuis le dernier commit.
git checkout -- nom-du-fichier


## 2.4. Gestion des remotes et des URLs
# Ajouter un dépôt distant.
git remote add origin https://github.com/ton-utilisateur/nom-du-depot.git

# Vérifier les dépôts distants.
git remote -v

# Supprimer un dépôt distant.
git remote remove origin


## 2.5. Outils de vérification et de logs
# Afficher l'état actuel du dépôt.
git status

# Afficher l'historique des commits de façon compacte.
git log --oneline

# Affichage graphique de l'arbre de commits.
git log --graph --oneline --all --decorate


## 2.6. Scripts Bash pour cloner tous les dépôts
# Automatisation du clonage de tous les dépôts d'un utilisateur GitHub.
#!/bin/bash
USERNAME="michael-snw"
mkdir -p F:/BackupGitHub
curl -s "https://api.github.com/users/$USERNAME/repos?per_page=100" | 
grep -o 'git@[^"]*' | 
xargs -L1 git clone -b master


## 2.7. Scripts Batch pour ajouter des fichiers .gitkeep
# Script pour ajouter automatiquement des fichiers .gitkeep dans chaque répertoire.
@echo off
setlocal
set "GIT_DIR=F:\AIIA\Git"
for /r "%GIT_DIR%" %%d in (.) do (
    if exist "%%d\" (
        echo. > "%%d\.gitkeep"
        echo "Fichier sentinelle ajouté dans : %%d"
    )
)
echo Opération terminée.
endlocal


## 2.8. Commandes de suppression de fichiers
# Supprimer les fichiers batch du suivi de Git sans les supprimer localement.
git rm --cached *.bat

# Commit les modifications.
git commit -m "Suppression des fichiers batch"

# Pousser les changements au dépôt distant.
git push